import React, { useRef } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const ProjectPDFView = React.forwardRef(({ project }, ref) => {
  const componentRef = useRef();

  // Function to download the project details as a PDF
  // const downloadPDF = () => {
  //   const input = contentRef.current;

  //   html2canvas(input, {
  //     scale: 2, // Higher scale for better quality
  //     useCORS: true, // Enable CORS to handle external images properly
  //     logging: true, // Logs to debug potential rendering issues
  //     allowTaint: true, // Allow tainting of images if needed
  //   })
  //     .then((canvas) => {
  //       const pdf = new jsPDF("p", "mm", "a4");
  //       const imgData = canvas.toDataURL("image/png");

  //       // Check if the image data is valid before adding it to PDF
  //       if (imgData.startsWith("data:image/png;base64")) {
  //         const imgWidth = 190; // Full width for A4
  //         const imgHeight = (canvas.height * imgWidth) / canvas.width;
  //         pdf.addImage(imgData, "PNG", 10, 10, imgWidth, imgHeight);
  //         pdf.save(`${project.name}-details.pdf`);
  //       } else {
  //         console.error("Invalid image data generated by html2canvas.");
  //       }
  //     })
  //     .catch((error) => {
  //       console.error("Error generating the canvas for the PDF:", error);
  //     });
  // };

  // Function to generate and download the PDF
  const handleDownloadPDF = async () => {
    const element = componentRef.current;
    const canvas = await html2canvas(element, { scale: 2 }); // Increase scale for better quality
    const imgData = canvas.toDataURL("image/png");

    const pdf = new jsPDF("p", "mm", "a4");
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

    pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
    pdf.save(`${project?.name || "Project_Details"}.pdf`);
  };

  // Expose the downloadPDF function through the ref
  // React.useImperativeHandle(ref, () => ({
  //   downloadPDF,
  // }));

  return (
    <div ref={componentRef} className="hidden">
      {/* Hidden from view */}
      <div
        style={{
          padding: "20px",
          fontSize: "12px",
          width: "210mm",
          height: "297mm",
        }}
      >
        <h2>{project.name}</h2>
        <p>
          <strong>Location:</strong> {project.location}
        </p>
        <p>
          <strong>Dateline:</strong> {project.dateline}
        </p>

        <h3>Owner Details</h3>
        <p>
          <strong>Name:</strong> {project.onarDetail?.userName}
        </p>
        <p>
          <strong>Address:</strong> {project.onarDetail?.userAddress}
        </p>
        <p>
          <strong>Phone:</strong> {project.onarDetail?.userPhone}
        </p>
        <p>
          <strong>Email:</strong> {project.onarDetail?.userEmail}
        </p>

        <h3>Project Description</h3>
        <p>{project.description}</p>

        <h3>Cost Details</h3>
        <p>
          <strong>Subtotal:</strong> ${project.subTotal}
        </p>
        <p>
          <strong>GST:</strong> ${project.gst}
        </p>
        <p>
          <strong>Total:</strong> ${project.total}
        </p>
      </div>
    </div>
  );
});

// Set display name for easier debugging
ProjectPDFView.displayName = "ProjectPDFView";

export default ProjectPDFView;
